% Generated by roxygen2 (4.0.1): do not edit by hand
\name{alm_events}
\alias{alm_events}
\title{Retrieve PLoS article-level metrics (ALM) events.}
\usage{
alm_events(doi = NULL, pmid = NULL, pmcid = NULL, mendeley_uuid = NULL,
  source = NULL, key = NULL, url = "http://alm.plos.org/api/v5/articles",
  ...)
}
\arguments{
\item{doi}{Digital object identifier for an article in PLoS Journals (character)}

\item{pmid}{PubMed object identifier (numeric)}

\item{pmcid}{PubMed Central object identifier (numeric)}

\item{mendeley_uuid}{Mendeley object identifier (character)}

\item{source}{The source to get events data from. You can pass in a character
vector, like: \code{c("mendeley","crossref")}}

\item{key}{your PLoS API key, either enter, or loads from .Rprofile (character)}

\item{url}{API endpoint, defaults to http://alm.plos.org/api/v3/articles (character)}

\item{...}{optional additional curl options (debugging tools mostly)}
}
\value{
PLoS altmetrics as data.frame's.
}
\description{
Events are the details of the metrics that are counted related to PLoS papers.
}
\details{
You can only supply one of the parmeters doi, pmid, pmcid, and mendeley.

		Query for as many articles at a time as you like. Though queries are broken
		up in to smaller bits of 30 identifiers at a time.

		If you supply both the days and months parameters, days takes precedence,
		and months is ignored.

		You can get events from many different sources. After calling alm_events,
		then index the output by the data provider you want. The options are:
		bloglines, citeulike, connotea, crossref, nature, postgenomic, pubmed,
		scopus, plos, researchblogging, biod, webofscience, pmc, facebook,
		mendeley, twitter, wikipedia, and scienceseeker.

		Beware that some data source are not parsed yet, so there may be event data
		but it is not provided yet as it is so messy to parse.

   See more info on PLOS's relative metrics event source here
   \url{http://www.plosone.org/static/almInfo#relativeMetrics}
}
\examples{
\dontrun{
# For one article
out <- alm_events(doi="10.1371/journal.pone.0029797")
names(out) # names of sources
# remove those with no data
out <- out[!out \%in\% c("sorry, no events content yet","parser not written yet")]
out[["pmc"]] # get the results for PubMed Central
out[["twitter"]] # get the results for twitter
out[["plos_comments"]] # get the results for PLOS comments, sorta messy
out[c("twitter","crossref")] # get the results for two sources

# Another example
(out <- alm_events(doi="10.1371/journal.pone.0001543"))
# remove those with no data
out <- out[!out \%in\% c("sorry, no events content yet","parser not written yet")]
names(out)
out[['scopus']]
out[['mendeley']]
out[['figshare']]
out[['pubmed']]

# Two doi's
dois <- c('10.1371/journal.pone.0001543','10.1371/journal.pone.0040117')
out <- alm_events(doi=dois)
out[[1]]
out[[2]]
out[[1]][["figshare"]]$events

# Specify a specific source
alm_events(doi="10.1371/journal.pone.0035869", source="crossref")

# Specify two specific sources
alm_events(doi="10.1371/journal.pone.0035869", source=c("crossref","twitter"))

# Figshare data
alm_events(doi="10.1371/journal.pone.0069841", source='figshare')

# Datacite data
alm_events("10.1371/journal.pone.0012090", source='datacite')

# Reddit data
alm_events("10.1371/journal.pone.0015552", source='reddit')

# F1000 Prime data
alm_events(doi="10.1371/journal.pbio.1001041", source='f1000')
dois <- c('10.1371/journal.pmed.0020124','10.1371/journal.pbio.1001041',
           '10.1371/journal.pbio.0040020','10.1371/journal.pmed.1001300')
res <- alm_events(doi = dois, source='f1000')
res[[3]]
}
}
\references{
See a tutorial/vignette for alm at
\url{http://ropensci.org/tutorials/alm_tutorial.html}
}

