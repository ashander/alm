out <- df_to_SpatialPointsDataFrame(input, ...)
} else {
out <- df_to_SpatialPolygonsDataFrame(input)
}
unlink(paste0(path.expand(destpath), outfilename, ".geojson"))
writeOGR(out, paste0(path.expand(destpath), outfilename, ".geojson"), outfilename,
driver = "GeoJSON")
message(paste0("Success! File is at ", path.expand(destpath), outfilename,
".geojson"))
}
list_to_geojson(input, polygon=polygon)
to_geojson.list <- function(input, lat = "latitude", lon = "longitude", polygon=NULL, output='list', ...){
if(output=='list'){
x <- lapply(input, function(l) {
if (is.null(l[[lat]]) || is.null(l[[lon]])) {
return(NULL)
}
type <- ifelse(is.null(polygon), "Point", "Polygon")
list(type = type,
geometry = list(type = "Point",
coordinates = as.numeric(c(l[[lon]], l[[lat]]))),
properties = l[!(names(l) %in% c(lat, lon))])
})
setNames(Filter(function(x) !is.null(x), x), NULL)
} else {
list_to_geojson(input, polygon=polygon, ...)
}
}
mylist <- list(list(latitude=30, longitude=120, marker="red"), list(latitude=30, longitude=130, marker="blue"))
mylist
to_geojson(mylist)
to_geojson(mylist, output = "geojson")
#' @method to_geojson list
#' @export
#' @rdname to_geojson
to_geojson.list <- function(input, lat = "latitude", lon = "longitude", polygon=NULL, output='list', ...){
if(output=='list'){
x <- lapply(input, function(l) {
if (is.null(l[[lat]]) || is.null(l[[lon]])) {
return(NULL)
}
type <- ifelse(is.null(polygon), "Point", "Polygon")
list(type = type,
geometry = list(type = "Point",
coordinates = as.numeric(c(l[[lon]], l[[lat]]))),
properties = l[!(names(l) %in% c(lat, lon))])
})
setNames(Filter(function(x) !is.null(x), x), NULL)
} else {
list_to_geojson(input, polygon=polygon, ...)
}
}
list_to_geojson <- function(input, destpath = "~/", outfilename = "myfile", polygon=NULL, lon, lat){
input <- do.call(rbind.fill, lapply(input, data.frame))
if(is.null(polygon)){
out <- df_to_SpatialPointsDataFrame(input, lon=lon, lat=lat)
} else {
out <- df_to_SpatialPolygonsDataFrame(input)
}
unlink(paste0(path.expand(destpath), outfilename, ".geojson"))
writeOGR(out, paste0(path.expand(destpath), outfilename, ".geojson"), outfilename,
driver = "GeoJSON")
message(paste0("Success! File is at ", path.expand(destpath), outfilename,
".geojson"))
}
df_to_SpatialPolygonsDataFrame <- function(x){
x_split <- split(x, f = x$group)
res <- lapply(x_split, function(y){
coordinates(y) <- c("long","lat")
Polygon(y)
})
res <- Polygons(res, "polygons")
hh <- SpatialPolygons(list(res))
as(hh, "SpatialPolygonsDataFrame")
}
df_to_SpatialPointsDataFrame <- function(x, lon, lat){
coordinates(x) <- c(lon,lat)
return( x )
}
to_geojson(mylist)
to_geojson(mylist, output = "geojson")
to_geojson.list <- function(input, lat = "latitude", lon = "longitude", polygon=NULL, output='list', ...){
if(output=='list'){
x <- lapply(input, function(l) {
if (is.null(l[[lat]]) || is.null(l[[lon]])) {
return(NULL)
}
type <- ifelse(is.null(polygon), "Point", "Polygon")
list(type = type,
geometry = list(type = "Point",
coordinates = as.numeric(c(l[[lon]], l[[lat]]))),
properties = l[!(names(l) %in% c(lat, lon))])
})
setNames(Filter(function(x) !is.null(x), x), NULL)
} else {
list_to_geojson(input, lat=lat, lon=lon, polygon=polygon)
}
}
to_geojson(mylist, output = "geojson")
readLines("/Users/sacmac/myfile.geojson")
paste0(readLines("/Users/sacmac/myfile.geojson"))
paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = "")
fromJSON(paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = ""))
library(jsonlite)
fromJSON(paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = ""))
to_geojson(mylist)
?writeOGR
fromJSON(paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = ""))
fromJSON(paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = ""), simplifyVector = FALSE)
fromJSON(paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = ""), simplifyVector = FALSE)[[1]]
fromJSON(paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = ""), simplifyVector = FALSE)$features[[1]]
to_geojson(mylist)[[1]]
fromJSON(paste0(readLines("/Users/sacmac/myfile.geojson"), collapse = ""), simplifyVector = FALSE)$features
library(maps)
data(us.cities)
head(us.cities)
to_geojson(input=us.cities, lat='lat', lon='long')
to_geojson(input=us.cities, lat='lat', lon='long', output = "geojson")
to_geojson.data.frame(input=us.cities, lat='lat', lon='long', output = "geojson")
x=us.cities
df_to_SpatialPolygonsDataFrame(x)
head(x)
res <- df_to_SpatialPointsDataFrame(input)
input
input=us.cities
head(input)
res <- df_to_SpatialPointsDataFrame(input)
res <- df_to_SpatialPointsDataFrame(input, lon = lon, lat = lat)
lat
lon
lat='lat'
lon='long'
res <- df_to_SpatialPointsDataFrame(input, lon = lon, lat = lat)
res
SpatialPolygonsDataFrame_togeojson(res)
to_geojson <- function(...){
UseMethod("to_geojson")
}
#' @method to_geojson data.frame
#' @export
#' @rdname to_geojson
to_geojson.data.frame <- function(input, lat = "latitude", lon = "longitude", polygon=NULL, output='list', ...){
if(output=='list'){
input <- apply(input, 1, as.list)
x <- lapply(input, function(l) {
if (is.null(l[[lat]]) || is.null(l[[lon]])) {
return(NULL)
}
type <- ifelse(is.null(polygon), "Point", "Polygon")
list(type = type,
geometry = list(type = "Point",
coordinates = as.numeric(c(l[[lon]], l[[lat]]))),
properties = l[!(names(l) %in% c(lat, lon))])
})
setNames(Filter(function(x) !is.null(x), x), NULL)
} else {
if(is.null(polygon)){
res <- df_to_SpatialPointsDataFrame(input, lon = lon, lat = lat)
} else {
res <- df_to_SpatialPolygonsDataFrame(input)
}
SpatialPolygonsDataFrame_togeojson(res)
}
}
#' @method to_geojson list
#' @export
#' @rdname to_geojson
to_geojson.list <- function(input, lat = "latitude", lon = "longitude", polygon=NULL, output='list', ...){
if(output=='list'){
x <- lapply(input, function(l) {
if (is.null(l[[lat]]) || is.null(l[[lon]])) {
return(NULL)
}
type <- ifelse(is.null(polygon), "Point", "Polygon")
list(type = type,
geometry = list(type = "Point",
coordinates = as.numeric(c(l[[lon]], l[[lat]]))),
properties = l[!(names(l) %in% c(lat, lon))])
})
setNames(Filter(function(x) !is.null(x), x), NULL)
} else {
list_to_geojson(input, lat=lat, lon=lon, polygon=polygon)
}
}
list_to_geojson <- function(input, destpath = "~/", outfilename = "myfile", polygon=NULL, lon, lat){
input <- do.call(rbind.fill, lapply(input, data.frame))
if(is.null(polygon)){
out <- df_to_SpatialPointsDataFrame(input, lon=lon, lat=lat)
} else {
out <- df_to_SpatialPolygonsDataFrame(input)
}
unlink(paste0(path.expand(destpath), outfilename, ".geojson"))
writeOGR(out, paste0(path.expand(destpath), outfilename, ".geojson"), outfilename,
driver = "GeoJSON")
message(paste0("Success! File is at ", path.expand(destpath), outfilename,
".geojson"))
}
df_to_SpatialPolygonsDataFrame <- function(x){
x_split <- split(x, f = x$group)
res <- lapply(x_split, function(y){
coordinates(y) <- c("long","lat")
Polygon(y)
})
res <- Polygons(res, "polygons")
hh <- SpatialPolygons(list(res))
as(hh, "SpatialPolygonsDataFrame")
}
df_to_SpatialPointsDataFrame <- function(x, lon, lat){
coordinates(x) <- c(lon,lat)
return( x )
}
SpatialPolygonsDataFrame_togeojson <- function(input, destpath = "~/", outfilename = "myfile"){
unlink(paste0(path.expand(destpath), outfilename, ".geojson"))
writeOGR(input, paste0(path.expand(destpath), outfilename, ".geojson"), outfilename,
driver = "GeoJSON")
message(paste0("Success! File is at ", path.expand(destpath), outfilename,
".geojson"))
}
to_geojson(input=us.cities, lat='lat', lon='long')
to_geojson(input=us.cities, lat='lat', lon='long', output = "geojson")
source('~/github/ropensci/togeojson/R/style_geojson.r')
head(states)
library(ggplot2)
states <- map_data("state")
head(states)
nrow(states)
states[1:10,]
smalluscities <- us.cities[1:10,]
smalluscities
source('~/github/ropensci/togeojson/R/style_geojson.r')
style_geojson(smalluscities)
smalluscities <- us.cities[1:20,]
style_geojson(smalluscities)
smalluscities
style_geojson(smalluscities, var = 'country.etc')
style_geojson(smalluscities, var = 'country.etc', var_col = "blue")
style_geojson(smalluscities, var = 'country.etc', color=c('#976AAE','#6B944D','#BD5945'), size=c('small','medium','large'))
unique(smalluscities$country.etc)
library(RColorBrewer)
help(package = RColorBrewer)
brewer.pal.info["Blues",]
display.brewer.all(n=5,type="div",exact.n=TRUE)
brewer.pal(7,"Greens")
brewer.pal(7,"Blues")
style_geojson(smalluscities, var = 'country.etc', color=brewer.pal(length(unique(smalluscities$country.etc)), "Blues"), size=c('small','medium','large'))
smalluscities <- us.cities[1:12,]
smalluscities
unique(smalluscities$country.etc)
smalluscities <- us.cities[1:10,]
unique(smalluscities$country.etc)
smalluscities <- us.cities[100:110,]
unique(smalluscities$country.etc)
smalluscities <- us.cities[200:210,]
unique(smalluscities$country.etc)
smalluscities <- us.cities[300:310,]
unique(smalluscities$country.etc)
smalluscities <- us.cities[1:8,]
unique(smalluscities$country.etc)
us.cities[ us.cities$country.etc  %in% c('OR','CA','NY'), ]
nrow(us.cities[ us.cities$country.etc  %in% c('OR','CA','NY'), ])
smalluscities <- us.cities[ us.cities$country.etc  %in% c('OR','CA','NY'), ]
length(unique(smalluscities$country.etc))
style_geojson(smalluscities, var = 'country.etc', color=brewer.pal(length(unique(smalluscities$country.etc)), "Blues"), size=c('small','medium','large'))
#' mylist <- list(list(latitude=30, longitude=120, marker="red"),
#'                list(latitude=30, longitude=130, marker="blue"))
mylist
#' mylist <- list(list(latitude=30, longitude=120, state="US"),
#'                list(latitude=32, longitude=130, state="OR"),
#'                list(latitude=38, longitude=125, state="NY"),
#'                list(latitude=40, longitude=128, state="VT"))
mylist
mylist <- list(list(latitude=30, longitude=120, state="US"),
#'                list(latitude=32, longitude=130, state="OR"),
#'                list(latitude=38, longitude=125, state="NY"),
#'                list(latitude=40, longitude=128, state="VT"))
#' mylist <- list(list(latitude=30, longitude=120, state="US"),
#'                list(latitude=32, longitude=130, state="OR"),
#'                list(latitude=38, longitude=125, state="NY"),
#'                list(latitude=40, longitude=128, state="VT"))
mylist <- list(list(latitude=30, longitude=120, state="US"),
list(latitude=32, longitude=130, state="OR"),
list(latitude=38, longitude=125, state="NY"),
list(latitude=40, longitude=128, state="VT"))
mylist
sapply(mylist, '[[', 'state')
length(unique(sapply(mylist, '[[', 'state')))
smalluscities
input=smalluscities
var = 'country.etc'
color=brewer.pal(length(unique(smalluscities$country.etc)), "Blues")
color
mapping <- data.frame(var = unique(input[[var_col]]), col2 = color)
is.null(var_col) & is.null(var_sym) & is.null(var_size)
var_col <- var
var_col
mapping <- data.frame(var = unique(input[[var_col]]), col2 = color)
mapping
stuff <- input[[var_col]]
color_vec <- with(mapping, col2[match(stuff, var)])
stuff
color_vec
library(shiny)
runApp
col_search(name="Apis")
library(taxize)
col_search(name="Apis")
col_search(name="Apis mellifera")
col_search(name=c("Apis","Puma concolor"))
col_search
source('~/.active-rstudio-document')
load_defaults(col_Search)
load_defaults(col_search)
name="Apis"
url <- "http://www.catalogueoflife.org/col/webservice"
func <- function(x, y) {
if(is.null(checklist)){NULL} else {
cc <- match.arg(checklist, choices = c(2012, 2011, 2010, 2009, 2008, 2007))
if (cc %in% c(2012, 2011, 2010)){
url <- gsub("col", paste("annual-checklist/", cc, sep = ""), url)
} else {
url <- "http://webservice.catalogueoflife.org/annual-checklist/year/search.php"
url <- gsub("year", cc, url)
}
}
args <- compact(list(name = x, id = y, start = start))
out <- getForm(url, .params = args)
tt <- xmlParse(out)
toget <- c('id','name','rank','name_status')
nodes <- getNodeSet(tt, "//result", fun=xmlToList)
ldply(nodes, parsecoldata)
}
safe_func <- plyr::failwith(NULL, func)
is.null(id)
temp <- lapply(name, safe_func, y = NULL)
library(RCurl)
temp <- lapply(name, safe_func, y = NULL)
library(XML)
temp <- lapply(name, safe_func, y = NULL)
temp
temp <- col_search(name="Apis")
two <- col_search(name=c("Apis","Puma concolor"))
byid <- col_search(id=11935941)
expect_that(names(temp), equals("Apis"))
library(testthat)
expect_that(names(temp), equals("Apis"))
expect_that(as.character(temp[[1]]$name), equals("Apis"))
expect_that(names(temp), equals("Apis"))
expect_that(as.character(temp[[1]]$name), equals("Apis"))
expect_that(is.null(dim(temp)), is_true())
expect_that(dim(temp[[1]]), equals(c(1,10)))
expect_that(length(two), equals(2))
expect_that(dim(two[[1]]), equals(c(1,10)))
expect_that(dim(do.call(rbind, lapply(two,data.frame))), equals(c(2,10)))
expect_that(dim(byid[[1]]), equals(c(0,0)))
dim(do.call(rbind, lapply(two,data.frame)))
two
col_downstream(name="Apis", downto="Species")
col_downstream(name="Hemiptera", downto="Family", checklist=2011)
col_downstream(name="Hemiptera", downto="Family", checklist=2010)
out <- itis_downstream(tsns = 103359, "Family")
out
library(knitr)
opts_chunk$set(results="hide", fig.show="hide", fig.keep="none")
data(iris)
head(iris)
plot(iris$Sepal.Length, iris$Petal.Length)
library(ggplot2)
data(diamonds)
head(diamonds)
str(diamonds)
plot(diamonds$carat, diamonds$price)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, col=clarity)
qplot(carat, price, data=diamonds, facets = ~clarity)
qplot(carat, price, data=diamonds, facets = ~color)
qplot(carat, price, data=diamonds, facets = clarity~color)
getOption("SunlightLabsKey", stop("need an API key for Sunlight Labs"))
install_github("takluyver/IRkernel", pull = 14)
install_github("takluyver/IRkernel", pull = '14')
install_github("takluyver/IRkernel", ref = NULL, pull = '14')
update.packages("jsonlite")
install_github("jeroenooms/jsonlite")
install_github("takluyver/IRkernel", ref = NULL, pull = '14')
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
document(alm); install(alm)
document(alm); install(alm)
document(alm)
install(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
# document(alm); install(alm)
library(alm)
library(alm)
check(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
check(alm)
setwd("~/github/ropensci/alm")
setwd("~/github/ropensci/alm/inst//vign")
library(knitr)
knit("alm_vignette.Rmd")
library(rplos); library(plyr)
dois <- searchplos(q='science', fl="id", fq=list('cross_published_journal_key:PLoSONE', 'doc_type:full', 'publication_date:[2010-01-01T00:00:00Z TO 2010-12-31T23:59:59Z]'), limit=20)
dois
knit("alm_vignette.Rmd")
dat <- signposts(doi="10.1371/journal.pone.0029797")
dat
plot_signposts(input=dat)
plot_signposts(input=dat) + theme_bw(base_size = 12)
dois <- c('10.1371/journal.pone.0001543','10.1371/journal.pone.0040117','10.1371/journal.pone.0029797','10.1371/journal.pone.0039395')
dat <- signposts(doi=dois)
plot_signposts(input=dat) + theme_grey(base_size = 12)
dois <- searchplos(q='science', fl="id", fq=list('cross_published_journal_key:PLoSONE', 'doc_type:full', 'publication_date:[2010-01-01T00:00:00Z TO 2010-12-31T23:59:59Z]'), limit=200)
dois <- dois$id
dois <- dois[!grepl("annotation", dois)]
alm <- alm(doi=dois, total_details=TRUE)
alm <- ldply(alm)
plot_density(input=alm, source=c("counter_total","crossref_citations","twitter_total","wos_citations"), color=c("#83DFB4","#EFA5A5","#CFD470","#B2C9E4")) + theme_grey(base_size = 12)
plot_density(input=alm, source=c("counter_total","crossref_citations","twitter_total","wos_citations"), color=c("#83DFB4","#EFA5A5","#CFD470","#B2C9E4")) + theme_b(base_size = 12)
plot_density(input=alm, source=c("counter_total","crossref_citations","twitter_total","wos_citations"), color=c("#83DFB4","#EFA5A5","#CFD470","#B2C9E4"))
plot_density(input=alm, source=c("counter_total","crossref_citations","twitter_total","wos_citations"), color=c("#83DFB4","#EFA5A5","#CFD470","#B2C9E4")) + theme_bw(base_size = 12)
plot_density(input=alm, source=c("counter_total","crossref_citations","twitter_total","wos_citations"), color=c("#83DFB4","#EFA5A5","#CFD470","#B2C9E4")) + theme_bw(base_size = 162)
plot_density(input=alm, source=c("counter_total","crossref_citations","twitter_total","wos_citations"), color=c("#83DFB4","#EFA5A5","#CFD470","#B2C9E4")) + theme_bw(base_size = 6)
knit("alm_vignette.Rmd")
knit("alm_vignette.Rmd")
url <- "http://alm.labs.crossref.org/api/v3/articles"
dois <- c("10.1371/journal.pone.0086859", "10.1038/nature12990", "10.5860/choice.51-3037", "10.1111/jeb.12289")
alm(doi=dois, url = url, key=getOption("crossrefalmkey"))
dois <- c("10.1371/journal.pone.0086859", "10.1038/nature12990", "10.5860/choice.51-3037")
alm(doi=dois, url = url, key=getOption("crossrefalmkey"))
knit("alm_vignette.Rmd")
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
document(alm); install(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
document(alm); install(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
library(alm)
test_package("alm")
out <- almevents(doi="10.1371/journal.pone.0029797")
out <- out[!out %in% c("sorry, no events content yet","parser not written yet")] # remove those with no data
expect_that(out, is_a("list"))
expect_that(out[["pmc"]], is_a("data.frame"))
expect_that(nrow(out[["pmc"]]), equals(12))
nrow(out[["pmc"]])
expect_that(nrow(out[["pmc"]]), equals(25))
ncol(out[["twitter"]])
expect_that(ncol(out[["twitter"]]), equals(6))
length(out[c("twitter","crossref")])
expect_that(length(out[c("twitter","crossref")]), equals(2))
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
document(alm); install(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
# document(alm); install(alm)
library(alm)
# check(alm)
# run_examples(alm, run=FALSE)
# build(alm)
# build_win(alm, version="R-devel")
test_package("alm")
build_win(alm)
setwd("")
setwd("~")
build(alm)
build_win(alm, version="R-devel")
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
document(alm); install(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
# document(alm); install(alm)
library(alm)
# check(alm)
# run_examples(alm, run=FALSE)
build(alm)
key <- "MUvThuaeRNV2cNs"
library(alm)
dat <- alm(doi="10.1371/journal.pone.0029797", key=key)
key
getOption("PlosApiKey")
key <- "rkfDr76z75benY3pytM1"
dat <- alm(doi="10.1371/journal.pone.0029797", key=key)
dat
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
document(alm); install(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
# document(alm); install(alm)
library(alm)
# check(alm)
# run_examples(alm, run=FALSE)
build(alm)
apropos("ascii")
tools::showNonASCIIfile(file = "~/github/ropensci/alm/vignettes/alm_vignette.Rmd")
tools::showNonASCIIfile(file = "~/github/ropensci/alm/vignettes/alm_vignette.Rmd")
setwd("~/github/ropensci/alm/inst//vign")
library(knitr)
knit("alm_vignette.Rmd")
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
document(alm); install(alm)
library(roxygen2); library(testthat)
alm <- "~/github/ropensci/alm"
library(alm)
build(alm)
build_win(alm)
